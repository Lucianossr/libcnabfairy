"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * Created by Lucas Teske on 13/11/18.
 * 
 */
class CNABGenerator {
  constructor(lineLength = 240, startsWithOne = true) {
    this.currentLine = 0;
    this.lines = [];
    this.fields = [[]];
    this.lineLength = lineLength;
    this.startsWithOne = startsWithOne;

    this._resetLine();
  }

  get numLines() {
    return this.lines.length;
  }

  _resetLine() {
    this.buffer = [];

    for (let i = 0; i < this.lineLength; i++) {
      this.buffer.push(' ');
    }
  }

  _checkFieldColision(options) {
    const {
      start,
      end
    } = options;
    const lineFields = this.fields[this.currentLine];

    for (let i = 0; i < lineFields.length; i++) {
      const field = lineFields[i];

      if (start >= field.start && start <= field.end || end >= field.start && end <= field.end) {
        return true; // Field Colision
      }
    }

    return false;
  }

  put(data, options) {
    let val = typeof data === 'string' ? data : data.toString();
    const {
      start: s,
      end: e,
      padLeft = false,
      padChar = ' '
    } = options;
    const start = this.startsWithOne ? s - 1 : s;
    const end = this.startsWithOne ? e : e + 1;

    if (end > this.lineLength) {
      throw new Error('Line exceeding max width');
    }

    const fieldLen = end - start;

    if (fieldLen <= 0) {
      throw new Error('Field length should be bigger than 0');
    }

    if (this._checkFieldColision(options)) {
      throw new Error('There is already a field in that position');
    }

    this.fields[this.currentLine].push(options);

    if (fieldLen > val.length) {
      if (padLeft) {
        val = val.padStart(fieldLen, padChar);
      } else {
        val = val.padEnd(fieldLen, padChar);
      }
    }

    for (let i = 0; i < fieldLen; i++) {
      this.buffer[start + i] = val[i];
    }

    return this;
  }

  nextLine() {
    this.currentLine += 1;
    this.lines.push(this.buffer.join(''));

    this._resetLine();

    this.fields.push([]);
    return this;
  }

  toString() {
    return this.lines.join('\n');
  }

}

exports.default = CNABGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbmFiZ2VuZXJhdG9yLmpzIl0sIm5hbWVzIjpbIkNOQUJHZW5lcmF0b3IiLCJjb25zdHJ1Y3RvciIsImxpbmVMZW5ndGgiLCJzdGFydHNXaXRoT25lIiwiY3VycmVudExpbmUiLCJsaW5lcyIsImZpZWxkcyIsIl9yZXNldExpbmUiLCJudW1MaW5lcyIsImxlbmd0aCIsImJ1ZmZlciIsImkiLCJwdXNoIiwiX2NoZWNrRmllbGRDb2xpc2lvbiIsIm9wdGlvbnMiLCJzdGFydCIsImVuZCIsImxpbmVGaWVsZHMiLCJmaWVsZCIsInB1dCIsImRhdGEiLCJ2YWwiLCJ0b1N0cmluZyIsInMiLCJlIiwicGFkTGVmdCIsInBhZENoYXIiLCJFcnJvciIsImZpZWxkTGVuIiwicGFkU3RhcnQiLCJwYWRFbmQiLCJuZXh0TGluZSIsImpvaW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUtlLE1BQU1BLGFBQU4sQ0FBb0I7QUFDakNDLEVBQUFBLFdBQVcsQ0FBQ0MsVUFBVSxHQUFHLEdBQWQsRUFBbUJDLGFBQWEsR0FBRyxJQUFuQyxFQUF5QztBQUNsRCxTQUFLQyxXQUFMLEdBQW1CLENBQW5CO0FBQ0EsU0FBS0MsS0FBTCxHQUFhLEVBQWI7QUFDQSxTQUFLQyxNQUFMLEdBQWMsQ0FBQyxFQUFELENBQWQ7QUFDQSxTQUFLSixVQUFMLEdBQWtCQSxVQUFsQjtBQUNBLFNBQUtDLGFBQUwsR0FBcUJBLGFBQXJCOztBQUNBLFNBQUtJLFVBQUw7QUFDRDs7QUFFRCxNQUFJQyxRQUFKLEdBQWU7QUFDYixXQUFPLEtBQUtILEtBQUwsQ0FBV0ksTUFBbEI7QUFDRDs7QUFFREYsRUFBQUEsVUFBVSxHQUFHO0FBQ1gsU0FBS0csTUFBTCxHQUFjLEVBQWQ7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEtBQUtULFVBQXpCLEVBQXFDUyxDQUFDLEVBQXRDLEVBQTBDO0FBQ3hDLFdBQUtELE1BQUwsQ0FBWUUsSUFBWixDQUFp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QSxTQUFLekIsVUFBTDs7QUFDQSxTQUFLRCxNQUFMLENBQVlNLElBQVosQ0FBaUIsRUFBakI7QUFDQSxXQUFPLElBQVA7QUFDRDs7QUFFRFUsRUFBQUEsUUFBUSxHQUFZO0FBQ2xCLFdBQU8sS0FBS2pCLEtBQUwsQ0FBVzJCLElBQVgsQ0FBZ0IsSUFBaEIsQ0FBUDtBQUNEOztBQXhGZ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgTHVjYXMgVGVza2Ugb24gMTMvMTEvMTguXG4gKiBAZmxvd1xuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENOQUJHZW5lcmF0b3Ige1xuICBjb25zdHJ1Y3RvcihsaW5lTGVuZ3RoID0gMjQwLCBzdGFydHNXaXRoT25lID0gdHJ1ZSkge1xuICAgIHRoaXMuY3VycmVudExpbmUgPSAwO1xuICAgIHRoaXMubGluZXMgPSBbXTtcbiAgICB0aGlzLmZpZWxkcyA9IFtbXV07XG4gICAgdGhpcy5saW5lTGVuZ3RoID0gbGluZUxlbmd0aDtcbiAgICB0aGlzLnN0YXJ0c1dpdGhPbmUgPSBzdGFydHNXaXRoT25lO1xuICAgIHRoaXMuX3Jlc2V0TGluZSgpO1xuICB9XG5cbiAgZ2V0IG51bUxpbmVzKCkge1xuICAgIHJldHVybiB0aGlzLmxpbmVzLmxlbmd0aDtcbiAgfVxuXG4gIF9yZXNldExpbmUoKSB7XG4gICAgdGhpcy5idWZmZXIgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGluZUxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmJ1ZmZlci5wdXNoKCcgJyk7XG4gICAgfVxuICB9XG5cbiAgX2NoZWNrRmllbGRDb2xpc2lvbihvcHRpb25zKSB7XG4gICAgY29uc3QgeyBzdGFydCwgZW5kIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGxpbmVGaWVsZHMgPSB0aGlzLmZpZWxkc1t0aGlzLmN1cnJlbnRMaW5lXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVGaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGZpZWxkID0gbGluZUZpZWxkc1tpXTtcbiAgICAgIGlmIChcbiAgICAgICAgKHN0YXJ0ID49IGZpZWxkLnN0YXJ0ICYmIHN0YXJ0IDw9IGZpZWxkLmVuZCkgfHwgKGVuZCA+PSBmaWVsZC5zdGFydCAmJiBlbmQgPD0gZmllbGQuZW5kKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0cnVlOyAvLyBGaWVsZCBDb2xpc2lvblxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdXQoZGF0YTogbWl4ZWQsIG9wdGlvbnMpIDogQ05BQkdlbmVyYXRvciB7XG4gICAgbGV0IHZhbCA9IHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyA/IGRhdGEgOiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgY29uc3Qge1xuICAgICAgc3RhcnQ6IHMsXG4gICAgICBlbmQ6IGUsXG4gICAgICBwYWRMZWZ0ID0gZmFsc2UsXG4gICAgICBwYWRDaGFyID0gJyAnLFxuICAgIH0gPSBvcHRpb25zO1xuXG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnN0YXJ0c1dpdGhPbmUgPyBzIC0gMSA6IHM7XG4gICAgY29uc3QgZW5kID0gdGhpcy5zdGFydHNXaXRoT25lID8gZSA6IGUgKyAxO1xuXG4gICAgaWYgKGVuZCA+IHRoaXMubGluZUxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdMaW5lIGV4Y2VlZGluZyBtYXggd2lkdGgnKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWVsZExlbiA9IGVuZCAtIHN0YXJ0O1xuXG4gICAgaWYgKGZpZWxkTGVuIDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmllbGQgbGVuZ3RoIHNob3VsZCBiZSBiaWdnZXIgdGhhbiAwJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NoZWNrRmllbGRDb2xpc2lvbihvcHRpb25zKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGVyZSBpcyBhbHJlYWR5IGEgZmllbGQgaW4gdGhhdCBwb3NpdGlvbicpO1xuICAgIH1cblxuICAgIHRoaXMuZmllbGRzW3RoaXMuY3VycmVudExpbmVdLnB1c2gob3B0aW9ucyk7XG5cbiAgICBpZiAoZmllbGRMZW4gPiB2YWwubGVuZ3RoKSB7XG4gICAgICBpZiAocGFkTGVmdCkge1xuICAgICAgICB2YWwgPSB2YWwucGFkU3RhcnQoZmllbGRMZW4sIHBhZENoYXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gdmFsLnBhZEVuZChmaWVsZExlbiwgcGFkQ2hhcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZExlbjsgaSsrKSB7XG4gICAgICB0aGlzLmJ1ZmZlcltzdGFydCArIGldID0gdmFsW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbmV4dExpbmUoKSA6IENOQUJHZW5lcmF0b3Ige1xuICAgIHRoaXMuY3VycmVudExpbmUgKz0gMTtcbiAgICB0aGlzLmxpbmVzLnB1c2godGhpcy5idWZmZXIuam9pbignJykpO1xuICAgIHRoaXMuX3Jlc2V0TGluZSgpO1xuICAgIHRoaXMuZmllbGRzLnB1c2goW10pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdG9TdHJpbmcoKSA6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubGluZXMuam9pbignXFxuJyk7XG4gIH1cbn1cbiJdfQ==